<!-- 展示组件 -->
<template>
  <view class="demo-component">
    <view class="wrapper">
      <view>
        <button class="btn-primary" bindtap="showDialog">选择需要预览的组件</button>
      </view>

      <view class="mt-20">
        <view class="mb-15 bold">
          {{displayValue}} {{componentTitle}}
          <view class="fn-12 font-weight-normal color-primary ml-6" bindtap="copy" data-value="{{value}}">复制 demo 名称</view>
        </view>

        <!-- 嗨~看这里~~~需要进行展示的组件，请添加到这里~~~~ -->
        <!-- 建议在组件内根节点添加 class="demo" 后，使用 h3（功能标题）、p（功能描述） 修饰组件示例，如 src/common/components/Upload/FilePreviewDemo.vue -->
        <!-- 文档 Docs -->
        <UChartsDemo wx:if="{{value === 'UChartsDemo'}}"></UChartsDemo>

        <!-- 导航 Nav -->

        <!-- 其他 Other -->

      </view>
    </view>

  </view>
</template>

<script>
import mpx, { createPage } from '@mpxjs/core';
import { camelize, capitalize, getItemLabelFromObjectArray } from '@didi/func';
import { DEFAULT_CATEGORY, categoryMap } from './config';

createPage({
  data: {
    value: 'UChartsDemo',
    // 嗨~看这里~~~需要进行展示的组件，请添加到这里~~~~
    options: [
      { category: 'data', value: 'UChartsDemo', label: '图表' },

    ],
  },

  computed: {
    /* 组件列表分组
    [{
      componentList: [{isCustom:true, name:"FormDemo", label:"表单集合", comp: null, category:"docs", label:"文档" }],
      label:"文档",
      name:"docs",
      seq:1,
    }] */
    componentListGroup() {
      try {
        const map = this.options.reduce((result, item) => {
          const category = capitalize(camelize(item.category || DEFAULT_CATEGORY));
          if (!result[category]) {
            result[category] = [];
          }
          result[category].push(item);
          return result;
        }, {});

        const mapLen = Object.keys(map).length;
        return Object.entries(map).map((item, index) => {
          const key = item[0];
          const value = item[1];
          const categoryItem = categoryMap && categoryMap[key];
          return { name: key, label: categoryItem?.label || key, seq: categoryItem?.seq || (mapLen + index), componentList: value };
        }).sort((a, b) => a.seq - b.seq);
      } catch (error) {
        console.error('componentListGroup计算错误:', error);
        return [];
      }
    },
    componentTitle() {
      return getItemLabelFromObjectArray(this.options, this.value);
    },
    displayValue() {
      return this.value.replace(/Demo$/, '');
    },
  },

  attached() {
    try {
      const storedValue = mpx.getStorageSync('demoComponentKey');
      if (storedValue) {
        this.value = storedValue;
      }
    } catch (err) {
      // 首次运行或存储中没有数据，使用默认值
      console.log('使用默认组件值');
    }
  },

  methods: {
    showDialog() {
      try {
        // 构建选项列表
        const itemList = this.componentListGroup.map(group => {
          return group.componentList.map(item => item.label);
        }).flat();

        mpx.showActionSheet({
          itemList: itemList,
          success: (res) => {
            const selectedIndex = res.tapIndex;
            const selectedItem = this.componentListGroup.reduce((result, group) => {
              return result.concat(group.componentList);
            }, [])[selectedIndex];

            if (selectedItem) {
              this.value = selectedItem.value;
              mpx.setStorageSync('demoComponentKey', this.value);
            }
          },
        });
      } catch (error) {
        console.error('showDialog错误:', error);
        mpx.showToast({
          title: '组件列表加载失败',
          icon: 'none'
        });
      }
    },

    filterChange(searchParams) {
      console.log(searchParams);
    },

    // 复制文本
    copy(e) {
      const value = e.currentTarget.dataset.value;
      mpx.setClipboardData({ data: value });
    },
  },
});
</script>

<style lang="less" scoped>
.wrapper {
  padding: 10px;
  background-color: #FFFFFF;
}

.no-padding {
  background-color: #FFFFFF;
}

.btn-primary {
  font-size: 14px;
}

.demo-component {
  h2 {
    font-size: 18px;
  }

  ::v-deep .demo {
    > h2 {
      font-size: 18px;
    }

    > h3 {
      margin: 10px 0;
      font-size: 16px;
    }

    > h4 {
      margin: 8px 0;
      font-size: 14px;
    }

    > p {
      margin: 4px 0;
    }

    code {
      display: inline-block;
      margin: 0 3.5px;
      border-radius: 1px;
      padding: 1px 2.5px;
      color: #D56161;
      background: #F0F4F8;
    }
  }
}
</style>

<script type="application/json">
{
  "pages": [
    "./entry"
  ],
  "usingComponents": {
    "UChartsDemo": "./components/UCharts.mpx",
    "ApiDemo": "./components/Api.mpx",
    "WxDemo": "./components/Wx.mpx",
    "ColumnChart": "../../../common/components/Charts/ColumnChart.mpx",
    "BarChart": "../../../common/components/Charts/BarChart.mpx",
    "PieChart": "../../../common/components/Charts/PieChart.mpx",
    "MixChart": "../../../common/components/Charts/MixChart.mpx"
  }
}
</script>
