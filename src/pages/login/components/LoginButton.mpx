<!-- 登录按钮 -->
<template>

  <div class="login">
    <div class="login-title">协议授权</div>
    <checkbox-group class="login-protocol">
      <IconFont
        :color="!isAuth ? '#C2C2C7' : '#FF6600'"
        :icon-href="isAuth ? 'icon-market-check_active' : 'icon-market-check'"
        bind:handleClick="changeAuth"
      />

      <div class="desc">
        <div class="desc-title">已阅读并同意以下协议</div>
        <navigator class="login-protocol__a" bindclick="openPrivacyContract">《小程序隐私保护指引》</navigator>
        <navigator url="/pages/subPagesDoc/agreement/privacy/entry" class="login-protocol__a">《小程序隐私政策》</navigator>
        <navigator url="/pages/subPagesDoc/agreement/user/entry" class="login-protocol__a">《个人信息共享授权书》</navigator>
      </div>
    </checkbox-group>

    <button
      class="login-content__btn"
      open-type="{{opentype}}"
      bindtap="toLogin"
      bindgetphonenumber="getPhoneNumber"
    >一键登录</button>
  </div>
</template>

<script>
import mpx, { createComponent } from '@mpxjs/core';

import { getPhoneNumber, getStationList, setBindMerchant } from '@/common/api/login';
import { useUserStore } from '@/store/user';
import { isNotEmptyAny } from '@didi/func';

createComponent({
  data: {
    isAuth: true,
    code: '',
    opentype: 'getPhoneNumber',
    uid: '',
    userInfo: {},
  },
  async attached() {
    console.log('attached');

    const userStore = useUserStore();
    this.userInfo = userStore.userInfo;

    const res = await getStationList({
      merchantId: this.userInfo.merchantId,
    });
    const data = res.data;

    if (isNotEmptyAny(data) && data[0]) {
      await setBindMerchant({ merchantId: data[0].uid });

      this.uid = data[0].uid;

    }
  },
  methods: {
    toLogin() {
      console.log('toLogin', this.isAuth);

      if (this.isAuth) {
        mpx.login({
          success: (res) => {
          // code 用户登录凭证（有效期五分钟）。开发者需要在开发者服务器后台调用 code2Session，使用 code 换取 openid、unionid、session_key 等信息
            if (res.code) {
              this.code = res.code;
              console.log('res.code', res.code);
            } else {
              console.log('登录失败！' + res.errMsg);
            }
          },
        });
      } else {
        mpx.showToast({
          title: '请勾选协议',
          icon: 'none',
        });
      }
    },
    changeAuth() {
      this.isAuth = !this.isAuth;
      if (this.isAuth) {
        this.opentype = 'getPhoneNumber';
      } else {
        this.opentype = '';
      }
    },
    getPhoneNumber(e) {
      console.log('getPhoneNumber', e);
      const { iv, encryptedData, code, errMsg } = e.detail;
      if (errMsg === 'getPhoneNumber:ok') {
        const params = {
          authCode: code,
          iv,
          encryptedData,
          'appId': process.env.APPID || 'wx21c2e8ca1f7fe33d',
          'grant_type': process.env.GRANT_TYPE || '1',
        };
        mpx.showLoading({ title: '加载中' });
        try {
          getPhoneNumber(params).then(async(res) => {
            try {
              const userStore = useUserStore();
              userStore.updateUserInfo({
                ...this.userInfo,
                ...res.data,
              });
              console.log('res.mobilePhone = ', res);
              // await postMemberRegisterForStation(params2);
              mpx.hideLoading();
              mpx.showToast({ title: '登录成功' });
              // mpx.navigateBack({
              //   delta: 1,
              //   success: () => {
              //     mpx.$emit('dispatchLogin', userStore.getUserInfo);
              //   },
              // });
            } catch (updateError) {
              console.warn('更新用户信息失败:', updateError);
              mpx.hideLoading();
              mpx.showToast({ title: '登录成功，但更新信息失败', icon: 'none' });
            }
          }, (err) => {
            mpx.hideLoading();
            console.log('获取手机号失败:', err);
            mpx.showToast({ title: '获取手机号失败', icon: 'none' });
          });
        } catch (error) {
          mpx.hideLoading();
          console.log('请求异常:', error);
          mpx.showToast({ title: '网络请求失败', icon: 'none' });
        }
      } else {
        console.log('用户拒绝授权获取手机号:', errMsg);
        mpx.showToast({ title: '需要授权获取手机号', icon: 'none' });
      }
    },

    openPrivacyContract(e) {
      mpx.openPrivacyContract({
        success: () => {}, // 打开成功
        fail: () => {
          mpx.showToast({
            title: '打开协议失败',
            icon: 'error',
          });
        }, // 打开失败
        complete: () => {},
      });
    },

  },

});
</script>

<style lang="less" scoped>
@import '@/common/styles/index.less';
.login {
  position: absolute;
  background-color: #fff;
  padding: 40rpx 40rpx;
  border-radius: 32rpx;
  width: 686rpx;
  left: 32rpx;
  bottom: calc(32rpx + constant(safe-area-inset-bottom));
  bottom: calc(32rpx + env(safe-area-inset-bottom));

  &-title {
    font-size: 32rpx;
    color: #363646;
    font-weight: bold;
    text-align: center;
    padding-bottom: 32rpx;
  }

  &-protocol {
    .f-DAJ(row, flex-start, flex-start);
    &__a {
      font-size: 24rpx;
    }
  }

  &-content__btn {
    margin: 64rpx 0 0 0;
    width: 100%;
    background: #FF6600;
    border-radius: 160rpx;
    font-size: 32rpx;
    font-weight: 500;
    color: #FFFFFF;
  }

  .desc {
    .f-DAJ(row, center, flex-start);
    flex-wrap: wrap;
    margin-left: 12rpx;
    &-title {
      font-size: 24rpx;
      color: #72727D;
      display: inline-block;
    }
  }
}

::v-deep .icon-market-check_active {
  color: #FF6600;
}

</style>

<script type="application/json">
{
  "component": true,
  "usingComponents": {
    "IconFont": "@/common/components/IconFont/index.mpx"
  }
}
</script>
